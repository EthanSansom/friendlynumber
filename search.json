[{"path":"https://ethansansom.github.io/friendlynumber/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 friendlynumber authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Sansom. Author, maintainer.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sansom E (2025). friendlynumber: Translate numbers English numerals. R package version 0.0.0.9000, https://ethansansom.github.io/friendlynumber/, https://github.com/EthanSansom/friendlynumber.","code":"@Manual{,   title = {friendlynumber: Translate numbers into English numerals},   author = {Ethan Sansom},   year = {2025},   note = {R package version 0.0.0.9000, https://ethansansom.github.io/friendlynumber/},   url = {https://github.com/EthanSansom/friendlynumber}, }"},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"friendlynumber-","dir":"","previous_headings":"","what":"Translate numbers into English numerals","title":"Translate numbers into English numerals","text":"{friendlynumber} translates vectors numbers character vectors English numerals (AKA number words). Supported numerals include: Cardinals: one, ten two thirds, one thousand twenty-one Ordinals: first, second, one millionth, 1st, 2nd, 1,000,000th Counts: times, , twice, three times Quantifiers: , , , three, 999, every {friendlynumber} functions intended used internally packages (e.g. generating friendly error messages). end, {friendlynumber} written base R Imports.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Translate numbers into English numerals","text":"can install development version {friendlynumber} GitHub :","code":"# install.packages(\"pak\") pak::pak(\"EthanSansom/friendlynumber\")"},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Translate numbers into English numerals","text":"","code":"library(friendlynumber)"},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"cardinal-numerals","dir":"","previous_headings":"Features","what":"Cardinal Numerals","title":"Translate numbers into English numerals","text":"number_friendly() S3 generic converts numbers R cardinal numerals. number_friendly() defines methods four number classes included base R {bignum} package: Base <integer> <numeric> vectors {bignum} <bignum_biginteger> vectors, can store arbitrarily large integers {bignum} <bignum_bigfloat> vectors, store numbers 50 decimal digits precision method corresponding standalone *_friendly() function expects number specific class.","code":"number_friendly(c(0:3, 2/3, 1/100, NA, NaN, Inf)) #> [1] \"zero\"          \"one\"           \"two\"           \"three\"         #> [5] \"two thirds\"    \"one hundredth\" \"missing\"       \"not a number\"  #> [9] \"infinity\" number_friendly(1L)                     # integerish_friendly() #> [1] \"one\" number_friendly(1.0)                    # numeric_friendly() #> [1] \"one\" number_friendly(bignum::biginteger(1L)) # biginteger_friendly() #> [1] \"one\" number_friendly(bignum::bigfloat(1.0))  # bigfloat_friendly() #> [1] \"one\""},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"other-numerals","dir":"","previous_headings":"Features","what":"Other Numerals","title":"Translate numbers into English numerals","text":"{friendlynumber} provides additional set functions translating whole numbers (e.g. 1L 1.00) common numeral types.","code":"# Ordinals ordinal_friendly(0:4) #> [1] \"zeroth\" \"first\"  \"second\" \"third\"  \"fourth\"  # Numeric Ordinals nth_friendly(0:4) #> [1] \"0th\" \"1st\" \"2nd\" \"3rd\" \"4th\"  # Counts ntimes_friendly(0:4) #> [1] \"no times\"    \"once\"        \"twice\"       \"three times\" \"four times\"  # Quantifiers quantifier_friendly(0:4) #> [1] \"no\"        \"the\"       \"both\"      \"all three\" \"all four\""},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"precision","dir":"","previous_headings":"Features","what":"Precision","title":"Translate numbers into English numerals","text":"{friendlynumber} provides two options() setting number decimals {friendlynumber} functions report. format_number() utility function formats numbers via format() abides options. useful verifying whether unexpected results consequence precision issues. instance, look happens attempt translate number “ten billion one hundred-thousandth”. can use format_number() confirm , machine, <numeric> vector lacks precision store number accurately. Similar problems can arise working whole numbers. Consider number “ten quadrillion” minus one.","code":"options(   friendlynumber.numeric.digits = 3, # Effects `<numeric>` numbers   friendlynumber.bigfloat.digits = 5 # Effects `<bignum_bigfloat>` numbers )  numeric_friendly(0.12345) #> [1] \"one hundred twenty-three thousandths\" bigfloat_friendly(bignum::bigfloat(0.12345)) #> [1] \"twelve thousand three hundred forty-five hundred-thousandths\" format_number(0.12345) #> [1] \"0.123\" format_number(bignum::bigfloat(0.12345)) #> [1] \"0.12345\" options(   friendlynumber.numeric.digits = 7,    friendlynumber.bigfloat.digits = 7 )  numeric_friendly(10000000000.00001) #> [1] \"ten billion and ninety-five ten-millionths\" bigfloat_friendly(bignum::bigfloat(\"10000000000.00001\")) #> [1] \"ten billion and one hundred-thousandth\" format_number(10000000000.00001) #> [1] \"10,000,000,000.0000095\" format_number(bignum::bigfloat(\"10000000000.00001\")) #> [1] \"10,000,000,000.00001\" numeric_friendly(10000000000000000 - 1) #> [1] \"ten quadrillion\" biginteger_friendly(bignum::biginteger(\"10000000000000000\") - 1L) #> [1] \"nine quadrillion nine hundred ninety-nine trillion nine hundred ninety-nine billion nine hundred ninety-nine million nine hundred ninety-nine thousand nine hundred ninety-nine\""},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"advantages","dir":"","previous_headings":"","what":"Advantages","title":"Translate numbers into English numerals","text":"{friendlynumber} faster alternatives written base R - {english} {nombre} packages. increase speed processing scalar inputs, set *_friendly() functions check arguments valid types. *_friendly() functions slightly slower *_friendly_safe() alternative confirms ’s arguments correct type emits informative error otherwise. used {bignum} package, {friendlynumber} capable translating extremely large numbers cardinal numerals. , translate number equal 1 followed three thousand three 0’s.","code":"# Scalar (small) bench::mark(   english = as.character(english::english(1L)),   nombre = as.character(nombre::nom_card(1L)),   friendlynumber = as.character(number_friendly(1L)) )[1:6] #> # A tibble: 3 × 6 #>   expression          min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>     <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 english         89.58µs  92.33µs    10697.     140KB     33.8 #> 2 nombre         120.66µs 124.97µs     7832.     685KB     31.5 #> 3 friendlynumber   6.72µs   7.42µs   131498.        0B     39.5 # Scalar (large) bench::mark(   english = as.character(english::english(100000)),   nombre = as.character(nombre::nom_card(100000)),   friendlynumber = as.character(number_friendly(100000)) )[1:6] #> # A tibble: 3 × 6 #>   expression          min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>     <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 english           175µs  178.8µs     5538.    8.26KB     25.0 #> 2 nombre          125.9µs  129.6µs     7607.        0B     33.9 #> 3 friendlynumber   34.6µs   35.9µs    27493.        0B     30.3 # Vector bench::mark(   english = as.character(english::english(1:10000)),   nombre = as.character(nombre::nom_card(1:10000)),   friendlynumber = as.character(number_friendly(1:10000)),   filter_gc = FALSE )[1:6] #> # A tibble: 3 × 6 #>   expression          min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>     <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 english           1.25s    1.25s     0.800    2.34MB    12.0  #> 2 nombre          44.99ms  47.94ms    21.2     11.43MB    13.5  #> 3 friendlynumber   8.89ms   9.02ms   106.       3.87MB     7.99 try(integerish_friendly_safe(numbers = 1/2)) #> Error : `numbers` must be coercible to an integer without loss of precision. number_friendly(bignum::biginteger(10L)^3003L) #> [1] \"one millinillion\""},{"path":"https://ethansansom.github.io/friendlynumber/index.html","id":"inspiration","dir":"","previous_headings":"","what":"Inspiration","title":"Translate numbers into English numerals","text":"package originally inspired {english} package John Fox, Bill Venables, Anthony Damico Anne Pier Salverda, spurred fixation programming puzzle converting numbers numerals. Several functions {friendlynumber} inspired Alexander Rossell Hayes’ {nombre} package: ntimes_friendly() based nombre::adverbial() quantifier_friendly() based nombre::collective() following sources helpful naming extremely large numbers: blog Pointless Large Number Stuff @cookiefonster informed naming numbers larger 1,000,000 Robert Munafo’s writing Conway-Wechsler system naming arbitrarily large numbers used naming numbers 10^3003 larger Steve Olsen’s table “Big-Ass Numbers” used testing number_friendly()","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/bigfloat_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a bigfloat to a cardinal character vector — bigfloat_friendly","title":"Translate a bigfloat to a cardinal character vector — bigfloat_friendly","text":"Convert <bignum_bigfloat> cardinal numeral (e.g. one tenth, one, two). bignum::bigfloat() can store numbers 50 decimal digits precision, useful manipulating numbers accurately represented <numeric> vector. bigfloat_friendly_safe() checks arguments correct type raises informative error otherwise. bigfloat_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/bigfloat_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a bigfloat to a cardinal character vector — bigfloat_friendly","text":"","code":"bigfloat_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL )  bigfloat_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/bigfloat_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a bigfloat to a cardinal character vector — bigfloat_friendly","text":"numbers [bignum_bigfloat] bignum::bigfloat() vector translate. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. decimal [character(1)] word inserted whole fractional part translated numbers. decimal string \" \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default. and_fractional [TRUE / FALSE] Whether insert \" \" smallest fractional tens place translated numbers (e.g. \"one hundred one thousandths\" vs. \"one hundred one thousandths\"). and_fractional equal default. hyphenate_fractional [TRUE / FALSE] Whether hyphenate numbers 21 99 fractional part translated numbers (e.g. \"twenty-one hundredths\" \"twenty one hundredths\"). also determines hyphenation fractional units (e.g. \"one ten-millionth\" vs. \"one ten millionth\"). hyphenate_fractional equal hyphenate default. english_fractions [character] named character vector used dictionary translation fractional part numbers. names (.e. keys) decimal digits fractional number values corresponding translations. example english_fractions = c(\"5\" = \"half\") matches number 0.5 (translated \"half\") 2.5 (translated \"two half\"). default english_fractions named character vector translations fractions x / y x = 1, 2, ..., 8 y = 1, 2, ..., 9. example, 2 / 3 translated \"two thirds\" 1 / 2 translated \"one half\". Provide empty character english_fractions opt translations. case 1 / 2 translated \"five tenths\" instead \"one half\".","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/bigfloat_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a bigfloat to a cardinal character vector — bigfloat_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/bigfloat_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a bigfloat to a cardinal character vector — bigfloat_friendly","text":"","code":"if (requireNamespace(\"bignum\", quietly = TRUE)) {   bigfloat_friendly(bignum::bigfloat(c(0.5, 0, 0.123, NA, NaN, Inf)))    # Specify the translations of \"special\" numbers   bigfloat_friendly(bignum::bigfloat(NaN), nan = \"NAN\")    # Modify the output formatting   big <- bignum::bigfloat(1234.5678)   bigfloat_friendly(big)   bigfloat_friendly(big, decimal = \" point \")   bigfloat_friendly(big, hyphenate_fractional = FALSE)   bigfloat_friendly(big, and = TRUE, and_fractional = TRUE, decimal = \" . \")    # The `friendlynumber.bigfloat.digits` option specifies the number of   # `<bignum_bigfloat>` digits mentioned by `bigfloat_friendly()`   opts <- options()   options(friendlynumber.bigfloat.digits = 5)   bigfloat_friendly(bignum::bigpi)    options(friendlynumber.bigfloat.digits = 10)   bigfloat_friendly(bignum::bigpi)   options(opts)    # Set `english_fractions` to specify the translation of certain   # fractions. The names (keys) of `english_fractions` should match   # the decimal part of a fraction (e.g. `\"04\"` matches `0.04`).   bigfloat_friendly(     bignum::bigfloat(c(1/2, 0.04, 1.5, 10)),     english_fractions = c(`5` = \"1/2\", `04` = \"4/100\")   )    # Input validation   try(bigfloat_friendly_safe(bignum::bigpi, and = NA)) } #> Error : `and` must be `TRUE` or `FALSE`, not `NA`."},{"path":"https://ethansansom.github.io/friendlynumber/reference/biginteger_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a biginteger to a cardinal character vector — biginteger_friendly","title":"Translate a biginteger to a cardinal character vector — biginteger_friendly","text":"Convert <bignum_biginteger> cardinal numeral (e.g. one, two, three). bignum::biginteger() can store integer (.e. arbitrary precision), useful manipulating numbers large represented (accurately) <integer> <numeric> vector. biginteger_friendly_safe() checks arguments correct type raises informative error otherwise. biginteger_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/biginteger_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a biginteger to a cardinal character vector — biginteger_friendly","text":"","code":"biginteger_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE )  biginteger_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/biginteger_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a biginteger to a cardinal character vector — biginteger_friendly","text":"numbers [bignum_biginteger] bignum::biginteger() vector translate. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/biginteger_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a biginteger to a cardinal character vector — biginteger_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/biginteger_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a biginteger to a cardinal character vector — biginteger_friendly","text":"","code":"if (requireNamespace(\"bignum\", quietly = TRUE)) {   biginteger_friendly(bignum::biginteger(c(0, 1, 2, NA, 10001)))    # Specify the translations of \"special\" numbers   biginteger_friendly(bignum::biginteger(-10), negative = \"minus \")   biginteger_friendly(bignum::biginteger(NA), na = \"unknown\")    # Modify the output formatting   biginteger_friendly(bignum::biginteger(9999))   biginteger_friendly(bignum::biginteger(9999), and = TRUE)   biginteger_friendly(bignum::biginteger(9999), hyphenate = FALSE)    # Translate large numbers   large <- bignum::biginteger(10L)^1001L   biginteger_friendly(large)    # Input validation   try(biginteger_friendly_safe(1L)) } #> Error : `numbers` must be of class <bignum_biginteger>, not <integer>."},{"path":"https://ethansansom.github.io/friendlynumber/reference/format_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector of numbers — format_number","title":"Format a vector of numbers — format_number","text":"Format vector numbers using format().","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/format_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector of numbers — format_number","text":"","code":"format_number(x, ...)  # S3 method for class 'integer' format_number(x, bigmark = \",\", ...)  # S3 method for class 'bignum_biginteger' format_number(x, bigmark = \",\", ...)  # S3 method for class 'numeric' format_number(x, bigmark = \",\", ...)  # S3 method for class 'bignum_bigfloat' format_number(x, bigmark = \",\", ...)  # Default S3 method format_number(x, ...)"},{"path":"https://ethansansom.github.io/friendlynumber/reference/format_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector of numbers — format_number","text":"x vector numbers format. friendlynumber package defines methods integer, numeric, bignum::biginteger(), bignum::bigfloat() numbers. ... Additional arguments passed methods. bigmark [TRUE / FALSE] Whether thousands places formatted numbers separated comma (e.g. \"10,000,000\" vs. \"10000000\"). bigmark TRUE default.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/format_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector of numbers — format_number","text":"non-NA character vector length x.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/format_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format a vector of numbers — format_number","text":"number decimal digits shown output format_number() controlled friendlynumber.numeric.digits option numeric vectors friendlynumber.bigfloat.digits bignum::bigfloat() vectors. options also control number decimal digits translated numeric_friendly() bigfloat_friendly() respectively. , format_number() useful verifying output *_friendly() functions correct.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/format_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector of numbers — format_number","text":"","code":"format_number(c(1/3, 0, 0.999, NA, NaN, Inf, -Inf)) #> [1] \"0.3333333\" \"0\"         \"0.999\"     \"NA\"        \"NaN\"       \"Inf\"       #> [7] \"-Inf\"      format_number(c(1L, 2L, 1001L)) #> [1] \"1\"     \"2\"     \"1,001\" format_number(1001L, bigmark = FALSE) #> [1] \"1FALSE001\"  # Set `friendlynumber.numeric.digits` to control the decimal output opts <- options() options(friendlynumber.numeric.digits = 2) format_number(1234.1234) #> [1] \"1,234.12\" options(opts)  if (requireNamespace(\"bignum\", quietly = TRUE)) {   format_number(bignum::bigfloat(1234.1234))   format_number(bignum::biginteger(2000000))    # Set `friendlynumber.bigfloat.digits` to control the decimal output   opts <- options()   options(friendlynumber.bigfloat.digits = 3)   format_number(bignum::bigfloat(1234.1234))   options(opts) }"},{"path":"https://ethansansom.github.io/friendlynumber/reference/integerish_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate integer-ish numbers to a cardinal character vector — integerish_friendly","title":"Translate integer-ish numbers to a cardinal character vector — integerish_friendly","text":"Convert integer vector, numeric vector coercible integer without loss precision, cardinal numeral (e.g. one, two, three). integerish_friendly_safe() checks arguments correct type raises informative error otherwise. integerish_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/integerish_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate integer-ish numbers to a cardinal character vector — integerish_friendly","text":"","code":"integerish_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE )  integerish_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/integerish_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate integer-ish numbers to a cardinal character vector — integerish_friendly","text":"numbers [integer / numeric] integer integer-ish numeric vector translate. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/integerish_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate integer-ish numbers to a cardinal character vector — integerish_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/integerish_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate integer-ish numbers to a cardinal character vector — integerish_friendly","text":"","code":"integerish_friendly(c(0, 1, 2, NA, NaN, Inf, -Inf)) #> [1] \"zero\"              \"one\"               \"two\"               #> [4] \"missing\"           \"not a number\"      \"infinity\"          #> [7] \"negative infinity\" integerish_friendly(10^10) #> [1] \"ten billion\"  # Specify the translations of \"special\" numbers integerish_friendly(-10, negative = \"minus \") #> [1] \"minus ten\" integerish_friendly(NaN, nan = \"undefined\") #> [1] \"undefined\"  # Modify the output formatting integerish_friendly(1234) #> [1] \"one thousand two hundred thirty-four\" integerish_friendly(1234, and = TRUE) #> [1] \"one thousand two hundred and thirty-four\" integerish_friendly(1234, hyphenate = FALSE) #> [1] \"one thousand two hundred thirty four\"  # Input validation try(integerish_friendly_safe(0.5)) #> Error : `numbers` must be coercible to an integer without loss of precision. try(integerish_friendly_safe(1L, na = TRUE)) #> Error : `na` must be a string, not `TRUE`."},{"path":"https://ethansansom.github.io/friendlynumber/reference/nth_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate integer-ish numbers to a character vector of nths (1st, 2nd, 3rd) — nth_friendly","title":"Translate integer-ish numbers to a character vector of nths (1st, 2nd, 3rd) — nth_friendly","text":"Convert integer vector, numeric vector coercible integer without loss precision, \"nth\" (e.g. 1st, 2nd, 3rd, 22nd, 1,000th). nth_friendly_safe() checks arguments correct type raises informative error otherwise. nth_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/nth_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate integer-ish numbers to a character vector of nths (1st, 2nd, 3rd) — nth_friendly","text":"","code":"nth_friendly(   numbers,   zero = \"0th\",   na = \"missingth\",   nan = \"not a numberth\",   inf = \"infinitieth\",   negative = \"negative \",   bigmark = TRUE )  nth_friendly_safe(   numbers,   zero = \"zeroth\",   na = \"missingth\",   nan = \"not a numberth\",   inf = \"infinitieth\",   negative = \"negative \",   bigmark = TRUE )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/nth_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate integer-ish numbers to a character vector of nths (1st, 2nd, 3rd) — nth_friendly","text":"numbers [integer / numeric] integer integer-ish numeric vector translate. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. bigmark [TRUE / FALSE] Whether thousands places formatted numbers separated comma (e.g. \"10,000,000\" vs. \"10000000\"). bigmark TRUE default.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/nth_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate integer-ish numbers to a character vector of nths (1st, 2nd, 3rd) — nth_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/nth_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate integer-ish numbers to a character vector of nths (1st, 2nd, 3rd) — nth_friendly","text":"","code":"nth_friendly(c(0, 1, 2, 3, 22, 1001, NA, NaN, Inf, -Inf)) #>  [1] \"0th\"                  \"1st\"                  \"2nd\"                  #>  [4] \"3rd\"                  \"22nd\"                 \"1,001st\"              #>  [7] \"missingth\"            \"not a numberth\"       \"infinitieth\"          #> [10] \"negative infinitieth\"  # Specify the translations of \"special\" numbers nth_friendly(c(1, 0, NA), zero = \"noneth\", na = \"?\") #> [1] \"1st\"    \"noneth\" \"?\"       # Use `bigmark` to add or remove commas nth_friendly(1234, bigmark = TRUE) #> [1] \"1,234th\" nth_friendly(1234, bigmark = FALSE) #> [1] \"1234th\"  # Input validation try(nth_friendly_safe(1234, bigmark = \",\")) #> Error : `bigmark` must be `TRUE` or `FALSE`, not the string \",\"."},{"path":"https://ethansansom.github.io/friendlynumber/reference/ntimes_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate integer-ish numbers to a character vector of counts (once, twice, three times) — ntimes_friendly","title":"Translate integer-ish numbers to a character vector of counts (once, twice, three times) — ntimes_friendly","text":"Convert integer vector, numeric vector coercible integer without loss precision, count (e.g. times, , twice, four times). ntimes_friendly_safe() checks arguments correct type raises informative error otherwise. ntimes_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/ntimes_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate integer-ish numbers to a character vector of counts (once, twice, three times) — ntimes_friendly","text":"","code":"ntimes_friendly(   numbers,   one = \"once\",   two = \"twice\",   three = \"three times\",   zero = \"no times\",   na = \"an unknown number of times\",   nan = \"an undefined number of times\",   inf = \"infinite times\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/ntimes_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate integer-ish numbers to a character vector of counts (once, twice, three times) — ntimes_friendly","text":"numbers [integer / numeric] integer integer-ish numeric vector translate. one [character(1)] call values 1 numbers (e.g. one = \"\"). two [character(1)] call values 2 numbers (e.g. two = \"\"). three [character(1)] call values 3 numbers (e.g. three = \"thrice\"). zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/ntimes_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate integer-ish numbers to a character vector of counts (once, twice, three times) — ntimes_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/ntimes_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate integer-ish numbers to a character vector of counts (once, twice, three times) — ntimes_friendly","text":"","code":"ntimes_friendly(c(0, 1, 2, 3, 22, 1001, NA, NaN, Inf, -Inf)) #>  [1] \"no times\"                     \"once\"                         #>  [3] \"twice\"                        \"three times\"                  #>  [5] \"twenty-two times\"             \"one thousand one times\"       #>  [7] \"an unknown number of times\"   \"an undefined number of times\" #>  [9] \"infinite times\"               \"negative infinite times\"       # Specify the translations of \"special\" numbers ntimes_friendly(c(3, NA), three = \"thrice\", na = \"some times\") #> [1] \"thrice\"     \"some times\"  # Modify the output formatting ntimes_friendly(5678) #> [1] \"five thousand six hundred seventy-eight times\" ntimes_friendly(5678, and = TRUE) #> [1] \"five thousand six hundred and seventy-eight times\" ntimes_friendly(5678, hyphenate = FALSE) #> [1] \"five thousand six hundred seventy eight times\"  # Input validation try(ntimes_friendly_safe(1234, and = \" - \")) #> Error in ntimes_friendly_safe(1234, and = \" - \") :  #>   could not find function \"ntimes_friendly_safe\""},{"path":"https://ethansansom.github.io/friendlynumber/reference/number_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a vector of numbers to a cardinal character vector — number_friendly","title":"Translate a vector of numbers to a cardinal character vector — number_friendly","text":"Convert vector numbers cardinal numeral (e.g. one tenth, one, two). number_friendly_safe() checks arguments correct type raises informative error otherwise. number_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/number_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a vector of numbers to a cardinal character vector — number_friendly","text":"","code":"number_friendly(numbers, ...)  # S3 method for class 'numeric' number_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL,   ... )  # S3 method for class 'integer' number_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE,   ... )  # S3 method for class 'bignum_biginteger' number_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE,   ... )  # S3 method for class 'bignum_bigfloat' number_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL,   ... )  # Default S3 method number_friendly(numbers, ...)  number_friendly_safe(numbers, ...)  # S3 method for class 'numeric' number_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL,   ... )  # S3 method for class 'integer' number_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE,   ... )  # S3 method for class 'bignum_biginteger' number_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE,   ... )  # S3 method for class 'bignum_bigfloat' number_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL,   ... )  # Default S3 method number_friendly_safe(numbers, ...)"},{"path":"https://ethansansom.github.io/friendlynumber/reference/number_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a vector of numbers to a cardinal character vector — number_friendly","text":"numbers vector numbers translate. friendlynumber package defines methods integer, numeric, bignum::biginteger(), bignum::bigfloat() numbers. Integers passed integerish_friendly() Numeric vectors passed numeric_friendly() bignum::biginteger() vectors passed biginteger_friendly() bignum::bigfloat() vectors passed bigfloat_friendly() ... Additional arguments passed methods. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. decimal [character(1)] word inserted whole fractional part translated numbers. decimal string \" \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default. and_fractional [TRUE / FALSE] Whether insert \" \" smallest fractional tens place translated numbers (e.g. \"one hundred one thousandths\" vs. \"one hundred one thousandths\"). and_fractional equal default. hyphenate_fractional [TRUE / FALSE] Whether hyphenate numbers 21 99 fractional part translated numbers (e.g. \"twenty-one hundredths\" \"twenty one hundredths\"). also determines hyphenation fractional units (e.g. \"one ten-millionth\" vs. \"one ten millionth\"). hyphenate_fractional equal hyphenate default. english_fractions [character] named character vector used dictionary translation fractional part numbers. names (.e. keys) decimal digits fractional number values corresponding translations. example english_fractions = c(\"5\" = \"half\") matches number 0.5 (translated \"half\") 2.5 (translated \"two half\"). default english_fractions named character vector translations fractions x / y x = 1, 2, ..., 8 y = 1, 2, ..., 9. example, 2 / 3 translated \"two thirds\" 1 / 2 translated \"one half\". Provide empty character english_fractions opt translations. case 1 / 2 translated \"five tenths\" instead \"one half\".","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/number_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a vector of numbers to a cardinal character vector — number_friendly","text":"non-NA character vector length numbers.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/friendlynumber/reference/number_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a vector of numbers to a cardinal character vector — number_friendly","text":"","code":"number_friendly(c(1/3, 0, 0.999, NA, NaN, Inf, -Inf)) #> [1] \"one third\"                            #> [2] \"zero\"                                 #> [3] \"nine hundred ninety-nine thousandths\" #> [4] \"missing\"                              #> [5] \"not a number\"                         #> [6] \"infinity\"                             #> [7] \"negative infinity\"                    number_friendly(c(1L, 2L, 1001L)) #> [1] \"one\"              \"two\"              \"one thousand one\"  if (requireNamespace(\"bignum\", quietly = TRUE)) {   number_friendly(bignum::bigfloat(0.1234))   number_friendly(bignum::biginteger(10L)^50L) } #> [1] \"one hundred quindecillion\"  # Input validation try(number_friendly_safe(1L, zero = c(\"a\", \"zero\"))) #> Error : `zero` must be a string, not a character vector of length 2."},{"path":"https://ethansansom.github.io/friendlynumber/reference/numeric_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate a numeric vector to a cardinal character vector — numeric_friendly","title":"Translate a numeric vector to a cardinal character vector — numeric_friendly","text":"Convert numeric vector cardinal numeral (e.g. one tenth, one, two). numeric_friendly_safe() checks arguments correct type raises informative error otherwise. numeric_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/numeric_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate a numeric vector to a cardinal character vector — numeric_friendly","text":"","code":"numeric_friendly(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL )  numeric_friendly_safe(   numbers,   zero = \"zero\",   na = \"missing\",   nan = \"not a number\",   inf = \"infinity\",   negative = \"negative \",   decimal = \" and \",   and = FALSE,   hyphenate = TRUE,   and_fractional = and,   hyphenate_fractional = hyphenate,   english_fractions = NULL )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/numeric_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate a numeric vector to a cardinal character vector — numeric_friendly","text":"numbers [numeric] numeric vector translate. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. decimal [character(1)] word inserted whole fractional part translated numbers. decimal string \" \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default. and_fractional [TRUE / FALSE] Whether insert \" \" smallest fractional tens place translated numbers (e.g. \"one hundred one thousandths\" vs. \"one hundred one thousandths\"). and_fractional equal default. hyphenate_fractional [TRUE / FALSE] Whether hyphenate numbers 21 99 fractional part translated numbers (e.g. \"twenty-one hundredths\" \"twenty one hundredths\"). also determines hyphenation fractional units (e.g. \"one ten-millionth\" vs. \"one ten millionth\"). hyphenate_fractional equal hyphenate default. english_fractions [character] named character vector used dictionary translation fractional part numbers. names (.e. keys) decimal digits fractional number values corresponding translations. example english_fractions = c(\"5\" = \"half\") matches number 0.5 (translated \"half\") 2.5 (translated \"two half\"). default english_fractions named character vector translations fractions x / y x = 1, 2, ..., 8 y = 1, 2, ..., 9. example, 2 / 3 translated \"two thirds\" 1 / 2 translated \"one half\". Provide empty character english_fractions opt translations. case 1 / 2 translated \"five tenths\" instead \"one half\".","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/numeric_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate a numeric vector to a cardinal character vector — numeric_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/numeric_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate a numeric vector to a cardinal character vector — numeric_friendly","text":"","code":"numeric_friendly(c(1/3, 0, 0.999, NA, NaN, Inf, -Inf)) #> [1] \"one third\"                            #> [2] \"zero\"                                 #> [3] \"nine hundred ninety-nine thousandths\" #> [4] \"missing\"                              #> [5] \"not a number\"                         #> [6] \"infinity\"                             #> [7] \"negative infinity\"                     # Specify the translations of \"special\" numbers numeric_friendly(c(1, 0, Inf), zero = \"none\", inf = \"all\") #> [1] \"one\"  \"none\" \"all\"   # Modify the output formatting frac <- 8765.4321 numeric_friendly(frac) #> [1] \"eight thousand seven hundred sixty-five and four thousand three hundred twenty-one ten-thousandths\" numeric_friendly(frac, decimal = \" dot \") #> [1] \"eight thousand seven hundred sixty-five dot four thousand three hundred twenty-one ten-thousandths\" numeric_friendly(frac, hyphenate = TRUE, hyphenate_fractional = FALSE) #> [1] \"eight thousand seven hundred sixty-five and four thousand three hundred twenty one ten thousandths\" numeric_friendly(frac, and = TRUE, and_fractional = TRUE, decimal = \" . \") #> [1] \"eight thousand seven hundred and sixty-five . four thousand three hundred and twenty-one ten-thousandths\"  # The `friendlynumber.numeric.digits` option specifies the number of # numeric digits mentioned by `numeric_friendly()` opts <- options() options(friendlynumber.numeric.digits = 5) numeric_friendly(0.0987654321) #> [1] \"nine thousand eight hundred seventy-seven hundred-thousandths\"  options(friendlynumber.numeric.digits = 10) numeric_friendly(0.0987654321) #> [1] \"nine hundred eighty-seven million six hundred fifty-four thousand three hundred twenty-one ten-billionths\" options(opts)  # Set `english_fractions` to specify the translation of certain # fractions. The names (keys) of `english_fractions` should match # the decimal part of a fraction (e.g. `\"5\"` matches `0.5`). numeric_friendly(   c(1/2, 6/5, 12),   english_fractions = c(`5` = \"1/2\", `2` = \"1/5\") ) #> [1] \"1/2\"         \"one and 1/5\" \"twelve\"       # Input validation try(numeric_friendly_safe(\"A\")) #> Error : `numbers` must be numeric, not the string \"A\"."},{"path":"https://ethansansom.github.io/friendlynumber/reference/ordinal_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate integer-ish numbers to an ordinal character vector — ordinal_friendly","title":"Translate integer-ish numbers to an ordinal character vector — ordinal_friendly","text":"Convert integer vector, numeric vector coercible integer without loss precision, ordinal numeral (e.g. first, second, third). ordinal_friendly_safe() checks arguments correct type raises informative error otherwise. ordinal_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/ordinal_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate integer-ish numbers to an ordinal character vector — ordinal_friendly","text":"","code":"ordinal_friendly(   numbers,   zero = \"zeroth\",   na = \"missingth\",   nan = \"not a numberth\",   inf = \"infinitieth\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/ordinal_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate integer-ish numbers to an ordinal character vector — ordinal_friendly","text":"numbers [integer / numeric] integer integer-ish numeric vector translate. zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/ordinal_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate integer-ish numbers to an ordinal character vector — ordinal_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/ordinal_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate integer-ish numbers to an ordinal character vector — ordinal_friendly","text":"","code":"ordinal_friendly(c(0, 1, 2, 3, NA, NaN, Inf, -Inf)) #> [1] \"zeroth\"               \"first\"                \"second\"               #> [4] \"third\"                \"missingth\"            \"not a numberth\"       #> [7] \"infinitieth\"          \"negative infinitieth\" ordinal_friendly(10^10) #> [1] \"ten billionth\"  # Specify the translations of \"special\" numbers ordinal_friendly(0, zero = \"noneth\") #> [1] \"noneth\"  # Modify the output formatting ordinal_friendly(1234) #> [1] \"one thousand two hundred thirty-fourth\" ordinal_friendly(1234, and = TRUE) #> [1] \"one thousand two hundred and thirty-fourth\" ordinal_friendly(1234, hyphenate = FALSE) #> [1] \"one thousand two hundred thirty fourth\"  # Input validation try(ordinal_friendly_safe(0.5)) #> Error in ordinal_friendly_safe(0.5) :  #>   could not find function \"ordinal_friendly_safe\""},{"path":"https://ethansansom.github.io/friendlynumber/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Descriptions for friendlynumber Package — params","title":"Parameter Descriptions for friendlynumber Package — params","text":"Default parameter descriptions may overridden individual functions.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Descriptions for friendlynumber Package — params","text":"numbers [integer / numeric] integer integer-ish numeric vector translate. one [character(1)] call values 1 numbers (e.g. one = \"\"). two [character(1)] call values 2 numbers (e.g. two = \"\"). three [character(1)] call values 3 numbers (e.g. three = \"thrice\"). zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. decimal [character(1)] word inserted whole fractional part translated numbers. decimal string \" \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default. and_fractional [TRUE / FALSE] Whether insert \" \" smallest fractional tens place translated numbers (e.g. \"one hundred one thousandths\" vs. \"one hundred one thousandths\"). and_fractional equal default. hyphenate_fractional [TRUE / FALSE] Whether hyphenate numbers 21 99 fractional part translated numbers (e.g. \"twenty-one hundredths\" \"twenty one hundredths\"). also determines hyphenation fractional units (e.g. \"one ten-millionth\" vs. \"one ten millionth\"). hyphenate_fractional equal hyphenate default. bigmark [TRUE / FALSE] Whether thousands places formatted numbers separated comma (e.g. \"10,000,000\" vs. \"10000000\"). bigmark TRUE default. english_fractions [character] named character vector used dictionary translation fractional part numbers. names (.e. keys) decimal digits fractional number values corresponding translations. example english_fractions = c(\"5\" = \"half\") matches number 0.5 (translated \"half\") 2.5 (translated \"two half\"). default english_fractions named character vector translations fractions x / y x = 1, 2, ..., 8 y = 1, 2, ..., 9. example, 2 / 3 translated \"two thirds\" 1 / 2 translated \"one half\". Provide empty character english_fractions opt translations. case 1 / 2 translated \"five tenths\" instead \"one half\".","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Descriptions for friendlynumber Package — params","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/quantifier_friendly.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate integer-ish numbers to a character vector of quantifiers (the, both, all three) — quantifier_friendly","title":"Translate integer-ish numbers to a character vector of quantifiers (the, both, all three) — quantifier_friendly","text":"Convert integer vector, numeric vector coercible integer without loss precision, quantifier (e.g. , , every, five). quantifier_friendly_safe() checks arguments correct type raises informative error otherwise. quantifier_friendly() perform input validation maximize speed.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/quantifier_friendly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate integer-ish numbers to a character vector of quantifiers (the, both, all three) — quantifier_friendly","text":"","code":"quantifier_friendly(   numbers,   one = \"the\",   two = \"both\",   zero = \"no\",   na = \"a missing\",   nan = \"an undefined\",   inf = \"every\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE,   bigmark = TRUE,   max_friendly = 100 )  quantifier_friendly_safe(   numbers,   one = \"the\",   two = \"both\",   zero = \"no\",   na = \"a missing\",   nan = \"an undefined\",   inf = \"every\",   negative = \"negative \",   and = FALSE,   hyphenate = TRUE,   bigmark = TRUE,   max_friendly = 100 )"},{"path":"https://ethansansom.github.io/friendlynumber/reference/quantifier_friendly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate integer-ish numbers to a character vector of quantifiers (the, both, all three) — quantifier_friendly","text":"numbers [integer / numeric] integer integer-ish numeric vector translate. one [character(1)] call values 1 numbers (e.g. one = \"\"). two [character(1)] call values 2 numbers (e.g. two = \"\"). zero [character(1)] call values 0 numbers (e.g. zero = \"zero\"). na [character(1)] call values NA numbers (e.g. na = \"missing\"). nan [character(1)] call values NaN numbers (e.g. nan = \"undefined\"). inf [character(1)] call values Inf numbers (e.g. inf = \"infinity\"). negative [character(1)] prefix added translation negative elements numbers. negative string \"negative \" default. [TRUE / FALSE] Whether insert \" \" tens place translated numbers. FALSE default. hyphenate [TRUE / FALSE] Whether hyphenate numbers 21 99 (e.g. \"twenty-one\" vs. \"twenty one\"). hyphenate TRUE default. bigmark [TRUE / FALSE] Whether thousands places formatted numbers separated comma (e.g. \"10,000,000\" vs. \"10000000\"). bigmark TRUE default. max_friendly [numeric] maximum number convert numeral. Elements numbers max_friendly converted formatted numbers (e.g. \"1,000\" instead \"one thousand\"). max_friendly 100 default. Use bigmark argument determine whether formatted numbers comma separated (e.g. \"1,000\" vs. \"1000\").","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/quantifier_friendly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate integer-ish numbers to a character vector of quantifiers (the, both, all three) — quantifier_friendly","text":"non-NA character vector length numbers.","code":""},{"path":"https://ethansansom.github.io/friendlynumber/reference/quantifier_friendly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate integer-ish numbers to a character vector of quantifiers (the, both, all three) — quantifier_friendly","text":"","code":"quantifier_friendly(c(0, 1, 2, 3, NA, NaN, Inf)) #> [1] \"no\"           \"the\"          \"both\"         \"all three\"    \"a missing\"    #> [6] \"an undefined\" \"every\"         # The `negative` prefix appears after the `\"all\"` prefix quantifier_friendly(-4) #> [1] \"all negative four\"  # `-1` and `-2` are not translated using `one` and `two` quantifier_friendly(c(1, 2, -1, -2), one = \"the\", two = \"both\") #> [1] \"the\"              \"both\"             \"all negative one\" \"all negative two\"  # Suppress the translation of large numbers quantifier_friendly(c(99, 1234), max_friendly = -Inf) #> [1] \"all 99\"    \"all 1,234\" quantifier_friendly(c(99, 1234), max_friendly = 100) #> [1] \"all ninety-nine\" \"all 1,234\"       quantifier_friendly(c(99, 1234), max_friendly = 1500) #> [1] \"all ninety-nine\"                          #> [2] \"all one thousand two hundred thirty-four\"  # Specify the translations of \"special\" numbers quantifier_friendly(c(1, Inf), one = \"a\", inf = \"all\") #> [1] \"a\"   \"all\"  # Arguments `one`, `two`, `inf`, etc. take precedence over `max_friendly` quantifier_friendly(1:3, one = \"one\", two = \"two\", max_friendly = -1) #> [1] \"one\"   \"two\"   \"all 3\"  # Modify the output formatting quantifier_friendly(1021, max_friendly = Inf) #> [1] \"all one thousand twenty-one\" quantifier_friendly(1021, and = TRUE, max_friendly = Inf) #> [1] \"all one thousand and twenty-one\" quantifier_friendly(1021, hyphenate = FALSE, max_friendly = Inf) #> [1] \"all one thousand twenty one\" quantifier_friendly(1021, bigmark = FALSE, max_friendly = 10) #> [1] \"all 1021\" quantifier_friendly(1021, bigmark = TRUE, max_friendly = 10) #> [1] \"all 1,021\"  # Input validation try(quantifier_friendly_safe(1234, max_friendly = NA)) #> Error : `max_friendly` must be a number, not `NA`."}]
